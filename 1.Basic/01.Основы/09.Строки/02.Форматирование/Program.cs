using System;

namespace MyProgram
{
    class Program
    {
        static void Main(string[] args)
        {
            string user = "User";
            string password = "qwerty123";

            Console.WriteLine("Имя: {0}  Пароль: {1}", user, password);
            // В строке "Имя: {0} Пароль: {1}" на место {0} и {1}
            // будут вставляться в порядке следования user, password

            // То же самое мы можем сделать с помощью метода String.Format:
            string output = string.Format("Имя: {0}  Пароль: {1}", user, password);
            Console.WriteLine(output);

            /*
            * В методе Format могут использоваться различные спецификаторы и описатели 
            * чтобы настроить вывод данных.
            * C / c - Задает формат денежной единицы, указывает количество десятичных разрядов после запятой
            * D / d - Целочисленный формат, указывает минимальное количество цифр
            * E / e - Экспоненциальное представление числа, указывает количество десятичных разрядов после запятой
            * F / f - Формат дробных чисел с фиксированной точкой, указывает количество десятичных разрядов после запятой
            * G / g - Задает более короткий из двух форматов: F или E
            * N / n - Также задает формат дробных чисел с фиксированной точкой, определяет количество разрядов после запятой
            * P / p - Задает отображения знака процентов рядом с число, указывает количество десятичных разрядов после запятой
            * X / x - Шестнадцатеричный формат числа
            */

            double number = 23.7;
            string result = String.Format("{0:C}", number); // :C указывает на валюту
            Console.WriteLine(result); // $ 23.7 (консоль не всегда поддерживает отображение валюты)
            string result2 = String.Format("{0:C2}", number);
            // :C2 где 2 указывает сколько чисел будет использоваться после разделителя между целой и дробной частью.
            Console.WriteLine(result2); // $ 23.70

            //Используя знак #, можно настроить формат вывода.
            // Например, нам надо вывести некоторое число в формате телефона +х (ххх)ххх-хх-хх:
            long number3 = 01234567890;
            string result3 = String.Format("{0:+# (###) ###-##-##}", number3);
            Console.WriteLine(result3); // +0 (123) 456-78-90

            // Метод ToString() не только получает строковое описание объекта,
            // но и может осуществлять форматирование. Он поддерживает те же описатели, что используются в методе Format:
            Console.WriteLine(number3.ToString("+# (###) ###-##-##"));// +0 (123) 456-78-90
            Console.WriteLine(number.ToString("C2")); // $ 23,70


            // Интерполяция строк
            // Знак доллара перед строкой указывает, что будет осуществляться интерполяция строк. 
            Console.WriteLine($"Имя: {user} Пароль: {password}");
            Console.WriteLine($"Имя: {user} Пароль: {password}");

            string data = "DATA!!!";
            // data ?? "Default" -- выведет data если есть, иначе выведет "Default"
            Console.WriteLine($"{data ?? "Default"}");

            // Добавление пробелов
            Console.WriteLine($"Имя: {user,-5} Пароль: {password}"); // пробелы после
            Console.WriteLine($"Имя: {user,5} Пароль: {password}"); // пробелы до

        }
    }
}
