using System;

namespace MyProgram
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            /* Массив представляет набор однотипных данных.
            * Определение массива:
            * тип[] наименование;
            */
            int[] nums1;

            // Определение с присвоением:
            // операция new выделит память под 5 элементов массива: int[5]
            int[] nums2 = new int[5];

            // Можно сразу указать значения для этих элементов:
            int[] nums3 = new int[3] { 1, 2, 3 };

            //Размер массива может быть определен на основе указанных значений
            // Данные записи равнозначны
            int[] nums4 = new int[] { 1, 2, 3 };
            int[] nums5 = new[] { 1, 2, 3 };
            int[] nums6 = { 1, 2, 3 };

            // Для обращения к элементам массива используются индексы.
            // Индекс представляет номер элемента в массиве, нумерация начинается с нуля.
            int[] nums7 = new int[3];
            nums7[0] = 1;
            nums7[1] = 2;
            nums7[2] = 3;
            Console.WriteLine(nums7[1]);  // 2

            /*
            * Многомерные массивы характеризуются таким понятием как ранг или количество измерений.
            * У многомерных массивов количество измерений (ранг) больше 1.
            */
            int[,] mmas1 = { { 0, 1, 2 }, { 3, 4, 5 } };
            /* Такой массив можно представить как:
            * 0 1 2
            * 3 4 5
            * Соответственно 2 строки, 3 столбца
            */

            // Способы определения многомерного массива:
            int[,] mm1;
            int[,] mm2 = new int[1, 2];
            int[,] mm3 = new int[2, 3] { { 0, 1, 2 }, { 3, 4, 5 } };
            int[,] mm4 = new int[,] { { 0, 1, 2 }, { 3, 4, 5 } };
            int[,] mm5 = new[,] { { 0, 1, 2 }, { 3, 4, 5 } };
            int[,] mm6 = { { 0, 1, 2 }, { 3, 4, 5 } };

            int[,] mmas2 = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 }, { 10, 11, 12 } };

            // Получение длинны массива
            Console.WriteLine($"Длинна массива: {mmas2.Length}"); // 12

            // У каждого массива есть метод GetUpperBound(dimension),
            // который возвращает индекс последнего элемента в определенной размерности
            int rows = mmas2.GetUpperBound(0) + 1; // строки
            int columns = mmas2.Length / rows; // столбцы
            Console.WriteLine($"индекс {rows}");
            Console.WriteLine($"кол {columns}");
            // или так
            // int columns = mas.GetUpperBound(1) + 1;

            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < columns; j++)
                {
                    Console.Write($"{mmas2[i, j]} \t");
                }
                Console.WriteLine();
            }
            Console.WriteLine("----------");

            /*
            Массив массивов - две квадратных скобки [][] указывают, что это массив массивов.
            Массив массивов содержит в себе вложенными другие массивы.
            Длина такого массива указывается в первых квадратных скобках,
            последующие квадратные скобки должны быть пустыми.
            Определение массива массивов:
            new int[3][]
            В данном случае массив содержит три массива.
            */

            // здесь у нас массив из трех массивов, каждый из этих массивов двухмерный массив.
            int[][,] m1 = new int[3][,]
            {
                new int[,] { {1,2}, {3,4} },
                new int[,] { {1,2}, {3,6} },
                new int[,] { {1,2}, {3,5}, {8, 13} }
            };

            int[][] m2 = new int[3][];
            m2[0] = new int[] { 1, 2 };
            m2[1] = new int[] { 1, 2, 3 };
            m2[2] = new int[] { 1, 2, 3, 4 };

            // Перебор массива
            // Через foreach
            foreach (int[] row in m2)
            {
                foreach (int number in row)
                {
                    Console.Write($"{number} \t");
                }
                Console.WriteLine();
            }
            Console.WriteLine("----------");

            // Через цикл for
            for (int i = 0; i < m2.Length; i++)
            {
                for (int j = 0; j < m2[i].Length; j++)
                {
                    Console.Write($"{m2[i][j]} \t");
                }
                Console.WriteLine();
            }
            Console.WriteLine("----------");

            // Инверсия (переворот) массива
            int[] m3 = { -2, -1, 0, 1, 2 };
            int n = m3.Length; // длина массива
            int k = n / 2; // середина массива
            int buf; // временный буфер

            for (int i = 0; i < k; i++)
            {
                buf = m3[i];
                m3[i] = m3[n - i - 1];
                m3[n - i - 1] = buf;
            }
            // В итоге m3 = { 2, 1, 0, -1, -2 }

            // Сортировка массива
            // Исходный массив с данными в случайном порядке
            int[] nums = new int[7] { 9, 56, 34, 1, 6, 77, 88 };
            Sorf_fun(nums);
            // аналогично
            Array.Sort(nums);

        }

        private static void Sorf_fun(int[] nums)
        {
            // Исходный массив с данными в случайном порядке

            /* Сортировка массива
             * Проход по массиву и сравниваем элементы,
             * если элемент с меньшим индексом больше чем элемент с большим индексом
             * то меняем их местами.
             */

            int buf; // буфер
            for (int i = 0; i < nums.Length - 1; i++)
            {
                for (int j = i + 1; j < nums.Length; j++)
                {
                    if (nums[i] > nums[j])
                    {
                        buf = nums[i];
                        nums[i] = nums[j];
                        nums[j] = buf;
                    }
                }
            }

            // Вывод итогов.
            foreach (int i in nums)
            {
                Console.Write($"{i} ");
            }
        }
    }
}