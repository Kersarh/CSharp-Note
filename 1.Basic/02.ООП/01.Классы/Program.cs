using System;

namespace MyProgram
{
    class Program
    {
        static void Main(string[] args)
        {
            /* Классы объявляются с помощью ключевого слова class,
            * за которым следует уникальный идентификатор затем {}:
            * class MyClass {}
            * при создании экземпляра класса оператор new выделяет память
            * для объекта MyClass затем вызывает конструктор по умолчанию.
            * 
            * Конструкторы это специальные методы которые вызываются 
            * при создании нового объекта класса. 
            * Задача конструктора в начальной инициализации экземпляра класса.
            * 
            * Если конструктор не инициализирует значения переменных
            * они получают значения по умолчанию.
            * Например для числовых типов это 0
            * для строк это null
            */

            // Создадим экземпляр класса
            MyClass obj1 = new();
            // и вызовем метод класса
            obj1.Method(); // data = 0

            obj1.num = 10;
            obj1.Method(); // data = 10

            // Вызов класса с определенным конструктором

            // вызов 1-ого конструктора без параметров
            MyNewClass obj2 = new();
            obj2.Method();

            // вызов 2-ого конструктора с одним параметром
            MyNewClass obj3 = new("Hello");
            obj3.Method();

            // вызов 3-его конструктора с двумя параметрами
            MyNewClass obj4 = new("World", 20);
            obj4.Method();

            // Для создания экземпляра класса возможно применить инициализатор.
            // При этом в фигурных скобках передаются значения для доступных полей класса
            MyNewClass obj5 = new() { str = "Text", num = 100 };
            obj5.Method();

            // Создадим экземпляр вызвав первый конструктор
            // Что по цепочке вызовет срабатывание 3 конструктора
            TestClass _ = new();

        }
    }

    // Класс с конструктором по умолчанию
    class MyClass
    {
        public int num; // Поля класса

        public void Method() // Метод класса
        {
            Console.WriteLine($"data = {num}");
        }
    }

    // Создание класса с конструктором
    // в классе определено три конструктора которые принимают
    // различное количество параметров и задают значение для полей класса
    class MyNewClass
    {
        public string str;
        public int num;

        // 1 конструктор
        // Все параметры задаются в конструкторе
        public MyNewClass()
        {
            str = "Default str"; num = 10;
            Console.WriteLine("Сработал первый конструктор");
        }

        // 2 конструктор
        // Конструктор принимает только строку
        public MyNewClass(string str)
        {
            this.str = str; num = 15;
            Console.WriteLine("Сработал второй конструктор");
        }

        // 3 конструктор
        // Конструктор принимает строку и число
        public MyNewClass(string str, int num)
        {
            this.str = str; this.num = num;
            Console.WriteLine("Сработал третий конструктор");
        }

        public void Method()
        {
            Console.WriteLine($"str: {str} num: {num}");
        }
    }

    class TestClass
    {
        public string str;
        public int num;

        /* Ключевое слово this представляет ссылку на текущий экземпляр класса.
        * Например мы можем не дублировать функционал конструкторов
        * а вызывать из одного конструктора другой через ключевое слово this.
        * При этом передавая нужные параметры.
        */

        // первый конструктор вызывает второй
        // Передавая текстовое поле
        public TestClass() : this("MyText") { }

        // второй конструктор вызывает третий
        // Передавая текстовое поле и число
        public TestClass(string s) : this(s, 18) { }

        // Третий конструктор
        // В котором и реализуется вся необходимая логика
        public TestClass(string s, int n)
        {
            str = s;
            num = n;
            Console.WriteLine($"Третий конструктор класса TestClass");
        }
        public void Method()
        {
            Console.WriteLine($"str: {str} num: {num}");
        }
    }
}
